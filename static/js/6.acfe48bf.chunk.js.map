{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogContainer.jsx"],"names":["mapStateToPropsRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","className","id","name","Message","text","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","message","newMessageElement","createRef","onChange","e","updateNewMessageBody","target","value","ref","newMessageBody","placeholder","onClick","sendMessage","compose","dispatch","body","updateNewMessageBodyCreator","sendMessageCreator"],"mappings":"+OAIIA,EAA0B,SAACC,GAAD,MAAY,CACxCC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAKC,MAAMN,OACT,cAACG,EAAD,eAAeE,KAAKC,QADI,cAAC,IAAD,CAAUC,GAAI,eAHJ,GACbC,IAAML,WAStC,OADqCM,YAAQX,EAARW,CAAiCL,K,kICRzDM,MAPf,SAAoBJ,GAClB,OACE,qBAAKK,UAAU,uBAAf,SACE,cAAC,IAAD,CAASA,UAAU,qBAAqBJ,GAAI,YAAcD,EAAMM,GAAhE,SAAqEN,EAAMO,UCDlEC,MAJf,SAAiBR,GACf,OAAO,qBAAKK,UAAU,mBAAf,SAAmCL,EAAMS,Q,cCiDnCC,MA3Cf,SAAiBV,GACf,IAAIP,EAAQO,EAAMW,YAEdC,EAAkBnB,EAAMoB,QAAQC,KAAI,SAACC,GAAD,OAAqC,cAAC,EAAD,CAAYR,KAAMQ,EAAER,KAAiBD,GAAIS,EAAET,IAAZS,EAAET,OAC1GU,EAAmBvB,EAAMwB,SAASH,KAAI,SAACI,GAAD,OAAwC,cAAC,EAAD,CAAST,KAAMS,EAAEC,SAAcD,EAAEZ,OAC/Gc,EAAyBlB,IAAMmB,YASnC,OAAKrB,EAAMN,OAGT,sBAAKW,UAAU,UAAf,UACE,oBAAIA,UAAU,iBAAd,qBACA,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACGO,IAEH,sBAAKP,UAAU,oBAAf,UACE,8BAAMW,IACN,gCACE,8BACE,0BACEM,SAlBW,SAACC,GACxBvB,EAAMwB,qBAAqBD,EAAEE,OAAOC,QAkBxBC,IAAKP,EACLM,MAAO1B,EAAMW,YAAYiB,eACzBC,YAAY,wBAEhB,8BACE,wBAAQxB,UAAU,MAAMyB,QAAS,WA1B3C9B,EAAM+B,eA0BI,gCApBc,cAAC,IAAD,CAAU9B,GAAI,YCC3B+B,sBACb7B,aAjBoB,SAACV,GACrB,MAAO,CACLkB,YAAalB,EAAMkB,gBAGE,SAACsB,GACxB,MAAO,CACLT,qBAAsB,SAACU,GACrBD,EAASE,YAA4BD,KAEvCH,YAAa,WACXE,EAASG,oBAObxC,IAFaoC,CAGbtB","file":"static/js/6.acfe48bf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to={'/login'} />;\r\n      return <Component {...this.props} />\r\n    }\r\n\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent);\r\n  return ConnectedAuthRedirectComponent\r\n}","import { NavLink } from \"react-router-dom\"\r\n\r\nfunction DialogItem(props: { name: string, id: number }) {\r\n  return (\r\n    <div className=\"dialogs__item active\">\r\n      <NavLink className=\"dialogs__item-link\" to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\nexport default DialogItem","function Message(props: { text: string }) {\r\n  return <div className=\"dialogs__message\">{props.text}</div>\r\n}\r\n\r\nexport default Message","import React from 'react';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport './Dialogs.scss';\r\n\r\nfunction Dialogs(props: any) {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d: { name: string, id: number }) => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n  let messagesElements = state.messages.map((m: { message: string, id: number }) => <Message text={m.message} key={m.id} />);\r\n  let newMessageElement: any = React.createRef();\r\n\r\n  let onSendMessageClick = () => {\r\n    props.sendMessage();\r\n  }\r\n  let onNewMessageChange = (e: any) => {\r\n    props.updateNewMessageBody(e.target.value);\r\n  }\r\n\r\n  if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n  return (\r\n    <div className=\"dialogs\">\r\n      <h3 className=\"dialogs__title\">Dialogs</h3>\r\n      <div className=\"dialogs__wrapper\">\r\n        <div className=\"dialogs__items\">\r\n          {dialogsElements}\r\n        </div>\r\n        <div className=\"dialogs__messages\">\r\n          <div>{messagesElements}</div>\r\n          <div>\r\n            <div>\r\n              <textarea\r\n                onChange={onNewMessageChange}\r\n                ref={newMessageElement}\r\n                value={props.dialogsPage.newMessageBody}\r\n                placeholder=\"Enter you message\" />\r\n            </div>\r\n            <div>\r\n              <button className=\"btn\" onClick={() => { onSendMessageClick() }}>Send</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from './../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateNewMessageBody: (body) => {\r\n      dispatch(updateNewMessageBodyCreator(body));\r\n    },\r\n    sendMessage: () => {\r\n      dispatch(sendMessageCreator());\r\n    }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect,\r\n)(Dialogs);"],"sourceRoot":""}