{"version":3,"sources":["components/Login/LoginForm/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.jsx"],"names":["LoginForm","props","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","Yup","max","required","onSubmit","values","LoginUser","handleSubmit","className","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","value","touched","errors","Login","LoginContainer","this","React","Component","compose","connect","state","withRouter"],"mappings":"sOA+DeA,MA1Df,SAAmBC,GAEjB,IAAMC,EAASC,YAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,WAAY,GAEdC,iBAAkBC,IAAW,CAC3BH,SAAUG,MACPC,IAAI,GAAI,wGACRC,SAAS,+CACZN,MAAOI,MAAaJ,MAAM,mFAAuBM,SAAS,iDAG5DC,SAAU,SAAAC,GACRZ,EAAMa,UAAUD,EAAOR,MAAOQ,EAAOP,SAAUO,EAAON,eAK1D,OACE,uBAAMK,SAAUV,EAAOa,aAAcC,UAAU,aAA/C,UACE,uBAAOC,QAAQ,QAAf,mBACA,sBAAKD,UAAU,oBAAf,UACE,uBACEA,UAAU,0BACVE,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,WACfC,MAAOvB,EAAOW,OAAOR,QAEtBH,EAAOwB,QAAQrB,OAASH,EAAOyB,OAAOtB,MACrC,8BAAMH,EAAOyB,OAAOtB,QAClB,QAEN,uBAAOY,QAAQ,WAAf,sBACA,sBAAKD,UAAU,oBAAf,UACE,uBACEE,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,SAAUnB,EAAOoB,aACjBC,OAAQrB,EAAOsB,WACfC,MAAOvB,EAAOW,OAAOP,WAEtBJ,EAAOwB,QAAQpB,UAAYJ,EAAOyB,OAAOrB,SACxC,8BAAMJ,EAAOyB,OAAOrB,WAClB,QAEN,wBAAQc,KAAK,SAAb,wBC9CSQ,MATf,SAAe3B,GACb,OACE,gCACE,uCACA,cAAC,EAAD,CAAWa,UAAWb,EAAMa,gB,+CCC5Be,E,uKACJ,c,oBAGA,WACE,OACE,cAAC,EAAD,2BACMC,KAAK7B,OADX,IAEEa,UAAWgB,KAAK7B,MAAMa,iB,GARDiB,IAAMC,WAgBpBC,sBACbC,aAJoB,SAACC,GAAD,MAAY,KAIP,CAAErB,gBAC3BsB,IAFaH,CAGbJ","file":"static/js/7.e05ebe09.chunk.js","sourcesContent":["import { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport './LoginForm.scss'\r\n\r\nfunction LoginForm(props: any) {\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: 1,\r\n    },\r\n    validationSchema: Yup.object({\r\n      password: Yup.string()\r\n        .max(20, 'Максимум 20 символов')\r\n        .required('Не верно'),\r\n      email: Yup.string().email('Не правильный email').required('Не верно'),\r\n    }),\r\n\r\n    onSubmit: values => {\r\n      props.LoginUser(values.email, values.password, values.rememberMe)\r\n      // alert(JSON.stringify(values, null, 2));\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit} className=\"login-form\">\r\n      <label htmlFor=\"email\">Email</label>\r\n      <div className=\"login-form__input\">\r\n        <input\r\n          className=\"login-form__input-email\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.email}\r\n        />\r\n        {formik.touched.email && formik.errors.email ? (\r\n          <div>{formik.errors.email}</div>\r\n        ) : null}\r\n      </div>\r\n      <label htmlFor=\"lastName\">Password</label>\r\n      <div className=\"login-form__input\">\r\n        <input\r\n          id=\"password\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.password}\r\n        />\r\n        {formik.touched.password && formik.errors.password ? (\r\n          <div>{formik.errors.password}</div>\r\n        ) : null}\r\n      </div>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nexport default LoginForm","import LoginForm from \"./LoginForm/LoginForm\";\r\n\r\nfunction Login(props: any) {\r\n  return (\r\n    <div>\r\n      <h2>LOGIN</h2>\r\n      <LoginForm LoginUser={props.LoginUser} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;","import Login from './Login';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { LoginUser } from '../../redux/auth-reducer'\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\n\r\nclass LoginContainer extends React.Component {\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Login\r\n        {...this.props}\r\n        LoginUser={this.props.LoginUser} />\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { LoginUser }),\r\n  withRouter,\r\n)(LoginContainer);"],"sourceRoot":""}